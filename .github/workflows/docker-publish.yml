name: Conditional Docker Builds and Pushes to AWS ECR

# This workflow triggers on push events to the main branch, but only when changes are made
# to files in the specified directories ('docker/cbdb/build/rocky9/**' and 'docker/cbdb/build/ubuntu24/**').
# It uses the dorny/paths-filter action to determine which directories have changes and
# then conditionally runs Docker build and push jobs based on those changes.

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
    paths:
      - 'docker/cbdb/build/rocky9/**'  # Trigger when files in this path change
      - 'docker/cbdb/build/ubuntu24/**'  # Trigger when files in this path change

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      rocky9_changed: ${{ steps.filter.outputs.rocky9 }}
      ubuntu24_changed: ${{ steps.filter.outputs.ubuntu24 }}
    steps:
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3  # Uses the latest v3.x.x version of the dorny/paths-filter action
        with:
          filters:
            rocky9:
              - 'docker/cbdb/build/rocky9/**'  # Check if changes were made in this path
            ubuntu24:
              - 'docker/cbdb/build/ubuntu24/**'  # Check if changes were made in this path

  cbdb-build-rocky9:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.rocky9_changed == 'true'  # Run this job only if changes were detected in the rocky9 path

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # This step checks out the repository's code so the workflow can access the files needed for the build.

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        # This step logs in to Docker Hub to prevent rate limits when pulling base images.

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # This step sets up Docker Buildx, a Docker CLI plugin that extends the Docker command with the full support
        # of the features provided by Moby BuildKit builder toolkit. It is required for building multi-platform images.

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        # This step configures the AWS credentials needed to authenticate and interact with AWS services like ECR.

      - name: Log in to Amazon ECR
        run: aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_PUBLIC_ENDPOINT }}
        # This step logs in to the Amazon Elastic Container Registry (ECR) public repository using the configured AWS credentials.
        # It is required before pushing the Docker image to ECR.

      - name: Build and tag Docker image for cbdb-build-rocky9
        run: |
          docker build -t ${{ secrets.ECR_PUBLIC_ENDPOINT }}/cbdb/build/rocky9:latest ./docker/cbdb/build/rocky9
          docker push ${{ secrets.ECR_PUBLIC_ENDPOINT }}/cbdb/build/rocky9:latest
        # This step builds the Docker image from the Dockerfile located in './docker/cbdb/build/rocky9'
        # and tags it with the latest tag. It then pushes the tagged image to the specified ECR repository.

  cbdb-build-ubuntu24:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.ubuntu24_changed == 'true'  # Run this job only if changes were detected in the ubuntu24 path

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # This step checks out the repository's code so the workflow can access the files needed for the build.

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        # This step logs in to Docker Hub to prevent rate limits when pulling base images.

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # This step sets up Docker Buildx, a Docker CLI plugin that extends the Docker command with the full support
        # of the features provided by Moby BuildKit builder toolkit. It is required for building multi-platform images.

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        # This step configures the AWS credentials needed to authenticate and interact with AWS services like ECR.

      - name: Log in to Amazon ECR
        run: aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_PUBLIC_ENDPOINT }}
        # This step logs in to the Amazon Elastic Container Registry (ECR) public repository using the configured AWS credentials.
        # It is required before pushing the Docker image to ECR.

      - name: Build and tag Docker image for cbdb-build-ubuntu24
        run: |
          docker build -t ${{ secrets.ECR_PUBLIC_ENDPOINT }}/cbdb/build/ubuntu24:latest ./docker/cbdb/build/ubuntu24
          docker push ${{ secrets.ECR_PUBLIC_ENDPOINT }}/cbdb/build/ubuntu24:latest
        # This step builds the Docker image from the Dockerfile located in './docker/cbdb/build/ubuntu24'
        # and tags it with the latest tag. It then pushes the tagged image to the specified ECR repository.
'
